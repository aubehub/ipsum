{"version":3,"sources":["Components/App/App.js","Components/User/User.js","Components/UsersList/UsersList.js","Components/Timer/Timer.js","Components/LoginPopup/LoginPopup.js","serviceWorker.js","index.js"],"names":["User","className","this","props","user","active","color","style","background","name","React","Component","UserList","registeredUserName","registeredUserColor","users","sort","u","v","map","key","Timer","numbers","timer","toString","split","n","idx","LoginPopup","state","userName","password","incorrectData","handleSubmit","bind","handleClose","changeUserName","changePassword","e","preventDefault","changeRegistrationName","closePopup","setState","target","value","onClick","onSubmit","onChange","type","placeholder","id","htmlFor","href","userGenerator","i","ranBoolean","Math","random","alreadyClicked","usersList","newUser","push","App","showPopup","localStorage","getItem","registeredUserAlreadyClicked","setRegisteredUserColor","resetLogIn","input","setItem","getColor","startTimer","interval","setInterval","updatedTime","clearInterval","clickGenerator","time","availableUsersArr","filter","floor","length","randomUser","getRandomUser","updatedRandomUser","updatedUserList","button","Button","src","togglePopup","Navbar","alt","Form","inline","FormControl","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.33217777.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport UsersList from '../UsersList/UsersList';\nimport Timer from '../Timer/Timer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport LoginPopup from '../LoginPopup/LoginPopup';\n\nimport { Navbar } from 'react-bootstrap';\nimport { Form } from 'react-bootstrap';\nimport { FormControl } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\n\n\nconst userGenerator = (i) => {\n  let ranBoolean = Math.random() < 0.7;\n  const user = {\n    name: \"User\" + i,\n    active: ranBoolean,\n    color: ranBoolean ? \"\" : \"white\",\n    alreadyClicked:false\n  }\n  return user;\n}\n\nlet usersList = [];\n\nfor(let i = 0; i <= 20; i++){\n  const newUser = userGenerator(i);\n  usersList.push(newUser)\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      usersList: usersList,\n      timer: null,\n      showPopup: false,\n      registeredUserName: localStorage.getItem(\"user\") || \"\",\n      registeredUserColor:\"\",\n      registeredUserAlreadyClicked:false\n    };\n    this.changeRegistrationName = this.changeRegistrationName.bind(this);\n    this.setRegisteredUserColor = this.setRegisteredUserColor.bind(this);\n    this.resetLogIn = this.resetLogIn.bind(this);\n  }\n\n  togglePopup() {  \n    this.setState({  \n         showPopup: !this.state.showPopup  \n    });  \n  }\n\n  changeRegistrationName(input){\n    localStorage.setItem(\"user\", input);\n    this.setState({registeredUserName: input})\n  }\n\n  setRegisteredUserColor(){\n    this.setState({\n      registeredUserColor:this.getColor(),\n      registeredUserAlreadyClicked:true\n    })\n  }\n\n  startTimer(){\n    this.setState({\n      timer: 6000\n    });\n  }\n\n  componentDidMount() {\n    this.startTimer()\n\n    const miFuncion = () => {\n      let updatedTime = this.state.timer - 1   \n      this.setState({\n        timer: updatedTime\n      })\n      \n      if (updatedTime === 0) {\n        clearInterval(interval); \n      }\n\n      if (Math.random() < 0.001) {\n        this.clickGenerator();\n      }\n    } \n\n    let interval = setInterval(miFuncion, 10);\n  }\n\n  getColor() {\n    const time = this.state.timer / 100;\n    if (time < 61 && time > 51) {\n      return \"purple\";\n    } else if (time < 52 && time > 41) {\n      return \"blue\";\n    } else if (time < 42 && time > 31) {\n      return \"green\";\n    } else if (time < 32 && time > 21) {\n      return \"yellow\";\n    } else if (time < 22 && time > 11) {\n      return \"orange\";\n    } else if (time < 12 && this.state.timer >= 0) {\n      return \"red\";    \n    } \n  }\n\n  getRandomUser(){\n    let availableUsersArr = this.state.usersList.filter(user =>\n      user.alreadyClicked === false && user.active === true);\n    \n    return availableUsersArr[Math.floor(Math.random() * availableUsersArr.length)]\n  }\n\n  clickGenerator(){\n    const randomUser = this.getRandomUser();\n    if (!randomUser) {\n      return\n    }\n    const updatedRandomUser = {\n      ...randomUser,\n      color: this.getColor(),\n      alreadyClicked: true      \n    };\n\n    const updatedUserList = this.state.usersList.filter(user => user.name !== randomUser.name);\n    updatedUserList.push(updatedRandomUser);\n    //actualiza el array con los usuarios con no cambian (filter) y a√±ade el que cambia (push)\n    //console.log(randomUser.name, updatedUserList)\n\n    this.setState({\n      usersList: updatedUserList\n    })\n    \n    this.startTimer();\n  }\n\n  resetLogIn(){\n    this.setState({\n      registeredUserName: \"\"\n    })\n  }\n\n  render(){\n    const isLoggedIn = this.state.registeredUserName!==\"\";\n    let button;\n    if (!isLoggedIn) {\n      button = <Button onClick={this.togglePopup.bind(this)}>LOG IN </Button>\n    } else {\n      button = <Button className=\"logout-btn\" onClick={this.resetLogIn}><span className=\"welcome\">Welcome Admin</span><img className=\"logout-icon\" src=\"./cerrar-sesion.png\"></img></Button>\n    }\n    \n    return (\n      <div className=\"App\">\n        <Navbar className=\"bg-light justify-content-between\">\n          <div className=\"reddit-div\">\n            <img className=\"anchor\" alt=\"\" src=\"./anchor.png\"></img>\n            <h3 className=\"reddit-title\">Ipsum</h3>\n          </div>\n          <Form inline>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"search-bar lg-8\" />\n          </Form>  \n            <div>\n            {button}\n            {this.state.showPopup ?  \n            <LoginPopup changeRegistrationName={this.changeRegistrationName}\n            closePopup={this.togglePopup.bind(this)} />  \n            : null  \n            }\n            </div>\n\n        </Navbar>\n\n        <div className=\"body-wrap\">\n          <div className=\"button-timer-border\">\n              <div className=\"button-timer-box\">\n                <div className=\"timer-content\">\n                  <Timer className=\"timer\" timer={this.state.timer} />\n                </div>\n                <div className=\"button-content\">\n                  <button className=\"the-button\" disabled={this.state.registeredUserAlreadyClicked===true}\n                  onClick={this.setRegisteredUserColor}><i className=\"fa fa-lock\"></i></button>\n                </div>\n            </div>\n          </div>\n\n          <div className=\"userslist-border\">  \n            <UsersList className=\"users-list\" users={this.state.usersList} registeredUserName={this.state.registeredUserName}\n            registeredUserColor={this.state.registeredUserColor} \n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport '../UsersList/UsersList.css';\n\n//let className = `users ${otraClase}`;\n\nclass User extends React.Component {\n\n  render() {\n    let className = \"users\";\n    if (!this.props.user.active) {\n      className += \" inactive\";\n    } else {\n      className += \" active\";\n    }\n\n    return(\n      <div>\n        <div className={`color-point ${this.props.user.color}`} style={{ background:this.props.user.color }}></div>\n        <div className={className}>\n          <h5 className=\"users-name\">{this.props.user.name}</h5>\n          {this.props.user.active === \"false\" && \n          <div className=\"inactive-div\">\n            <div className=\"white-point\"></div>\n            <div className=\" inactive\"></div>\n            </div>}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default User;\n\n","import React from 'react';\nimport './UsersList.css';\nimport  User from '../User/User';\n\nclass UserList extends React.Component {\n\n  render(){\n\n    return(\n      <div className=\"users-list\">\n        {this.props.registeredUserName !==\"\" &&  \n        <div className=\"point-user-admin\">\n          <div className=\"color-point\" style={{ background:this.props.registeredUserColor }}></div>       \n          <h5 className=\"admin\">Admin</h5>\n        </div>\n        }\n        <div className=\"users\">\n          {\n          this.props.users.sort((u,v) => u.name > v.name ? 1 : -1).map(user => {\n            return <User user={user} key={user.name} />\n          })\n        }\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default UserList;","import React from 'react';\nimport '../App/App.css';\n\nclass Timer extends React.Component {\n  \n  render(){\n    const numbers = this.props.timer?.toString().split('');\n  //converts numbers in array\n    return (\n      <div className=\"timer\">\n        <h2>{numbers?.map((n, idx) => \n          <span className={`number-${idx}`} key={idx}>{n}</span>\n          )}</h2>\n      </div>\n    )\n  }\n}\n\nexport default Timer;","import React from 'react'; \nimport './LoginPopup.css';\n\nclass LoginPopup extends React.Component { \n  constructor(props) {\n    super(props)\n    this.state = {\n      userName:\"\",\n      password:\"\",\n      incorrectData: false,\n    }\n\n  this.handleSubmit = this.handleSubmit.bind(this);\n  this.handleClose = this.handleClose.bind(this);\n  this.changeUserName = this.changeUserName.bind(this);\n  this.changePassword = this.changePassword.bind(this);  \n  }\n\n  handleSubmit(e){\n    e.preventDefault();\n    if(this.state.userName === 'Admin' && this.state.password === '123'){\n      this.props.changeRegistrationName(this.state.userName)\n      this.props.closePopup()\n    } else {\n      this.setState({\n        incorrectData: true\n      })\n    }\n  }\n\n  handleClose(e){\n    e.preventDefault();\n    this.props.closePopup()\n  }\n\n  changeUserName(e){\n    this.setState({userName:e.target.value})\n  }\n\n  changePassword(e){\n    this.setState({password:e.target.value})\n  }\n\n  render() {  \n    return (  \n      <div className='popup'>\n        <div className='popup-inner'>\n          <button onClick={this.handleClose} className=\"close-icon\"><i className=\"fa fa-times\"></i></button>\n          {this.state.incorrectData && <p className=\"error-message\">Incorrect username or password. Try again!</p>\n          }\n\n          <form \n          onSubmit={this.handleSubmit} >\n            <h3>Log In</h3>\n            <div className=\"form-group\">\n                <label>Username</label>\n                <input onChange={this.changeUserName} type=\"username\" className=\"form-control\" placeholder=\"Admin\" />\n            </div>\n\n            <div className=\"form-group\">\n                <label>Password</label>\n                <input type=\"password\" onChange={this.changePassword} className=\"form-control\" placeholder=\"123\" />\n            </div>\n\n            <div className=\"form-group\">\n                <div className=\"custom-control custom-checkbox\">\n                    <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\n                    <label className=\"custom-control-label\" htmlFor=\"customCheck1\">Remember me</label>\n                </div>\n            </div>\n\n            <button type=\"submit\" className=\"btn btn-primary btn-block\">Log in</button>\n            <p className=\"forgot-password text-right\">\n                Forgot <a href=\"#\">password?</a>\n            </p>\n          </form>\n        </div>  \n      </div>  \n    );  \n  }  \n}  \n\nexport default LoginPopup;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}